`timescale 1 ns/ 1 ps
`define ONE

module IIR_avr_tst();

   reg [13:0] adc;
   reg rst_n;   
   reg clk;
   reg [12:0] rdaddr1;
   wire [13:0] adc_val;
   wire [40:0] avr_whole;
   wire [40:0] avr_frac;
   
`ifdef ONE  
 
  
   IIR_avr i1 (
	       // port map - connection between master ports and signals/register
	       .adc(adc),
	       .rst_n(rst_n),
	       .clk(clk),
	       .avr_whole_out(avr_whole),
	       .avr_frac_out(avr_frac)
	       );
   
   test_rom_example i2 (
			.rdaddr(rdaddr1),
			.adc_val(adc_val)
			);
  
    // Clock generator
   localparam PERIOD = 50.0;
   always #(PERIOD/2) clk = ~ clk;
 
   always @(posedge clk)
     begin
	if (rdaddr1 == 13'd6778)
	  begin
	     adc<=adc_val;
	     rdaddr1 <= 13'b0;
	  end
	else
	  begin
	     rdaddr1 <= rdaddr1 +1'b1;
           if (rdaddr1[0] == 1'b0)
	       begin
	     	  adc <= 14'd1;
	       end
	     else if (rdaddr1[0] == 1'b1)
		begin
	     	   adc <= 14'd3;
		end
	   /*  else if (rdaddr1 == 9'd3)
		begin
	     	  adc <= 14'd4775;
		end
	     else if (rdaddr1 == 9'd4)
	       begin
	     	  adc <= 14'd4775;
	       end
	     else if (rdaddr1 == 9'd5)
	       begin
	     	  adc <= 14'd4778;
	       end
	     else if (rdaddr1 == 9'd6)
	       begin
	     	  adc <= 14'd4776;
	       end*/
	   // adc <= 14'd1;
	     
	  //  adc <= adc_val;
        /*     else if (switch == 2'b01)
	       begin
		  adc <= 14'd4777;
		  switch <= 2'b10;		  
	       end
	     else if (switch == 2'b10)
	       begin
		  adc <= 14'd4777;
		  switch <= 2'b11;
	       end
	     else if (switch == 2'b11)
	       begin
		  adc <= 14'd4777;
		  switch <= 2'b00;
	       end
	     else 
	       begin
		  adc <= 14'd4777;
		  switch <= 2'b01;
	       end*/
	   
	     
	 end
     end // always @ (posedge clk)


   
   initial                                                
     begin      
	clk = 1'b0;
	rdaddr1 =1'b0;
	adc= 1'b0;
	rst_n = 1'b0;
	#(5*PERIOD) rst_n = 1'b1;
     end             
   
`endif  
                                       
endmodule



